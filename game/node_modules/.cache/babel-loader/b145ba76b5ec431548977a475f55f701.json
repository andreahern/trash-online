{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Abe/Documents/projects/trash-online/client/src/views/Game/Table.js\";\nimport React, { Component } from \"react\";\nimport { draw, take, deal, end, roundWon, swapCards, getState, reset, scores } from \"../../GameFunctions\";\nimport \"../../App.css\";\nimport Card from \"./Card\";\nimport BoardController from \"./BoardController\";\nimport EndRound from \"./EndRound.js\";\nimport EndGame from \"./EndGame.js\";\nimport io from \"socket.io-client\";\nimport jwt_decode from \"jwt-decode\";\nconst socket = io(\"http://localhost:3002\");\n\nclass Table extends Component {\n  constructor() {\n    super();\n\n    this.drawCards = () => {\n      if (this.state.currentPlayer !== this.state.playerNumber) return;\n      draw(this.state.id, this.state);\n    };\n\n    this.takeTrash = () => {\n      if (this.state.currentPlayer !== this.state.playerNumber) return;\n      take(this.state.id, this.state);\n    };\n\n    this.dealCards = () => {\n      if (this.state.currentPlayer !== this.state.playerNumber) return;\n      deal(this.state.id, this.state);\n    };\n\n    this.endTurn = () => {\n      if (this.state.currentPlayer !== this.state.playerNumber) return;\n      end(this.state.id, this.state);\n    };\n\n    this.swap = index => {\n      if (this.state.currentPlayer !== this.state.playerNumber) return;\n      swapCards(this.state.id, index, this.state);\n    };\n\n    this.roundWon = playerWon => {\n      roundWon(this.state.id, playerWon, this.state);\n    };\n\n    this.resetGame = () => {\n      if (this.state.currentPlayer !== this.state.playerNumber) return;\n      reset(this.state.id, this.state);\n    };\n\n    this.return = () => {\n      scores(this.state.playerNumber, this.state.playerWon);\n      this.props.history.push(`/profile`);\n    };\n\n    this.state = {\n      id: \"\",\n      activePlayers: 0,\n      player1Name: \"\",\n      player2Name: \"\",\n      playerNumber: 0,\n      deck: [],\n      hand: \"\",\n      trash: [],\n      currentPlayer: 1,\n      gameInSession: false,\n      playerPlaying: false,\n      player1Size: 10,\n      player2Size: 10,\n      player1Cards: [],\n      player2Cards: [],\n      player1Flipped: new Array(10).fill(0),\n      player2Flipped: new Array(10).fill(0),\n      playerWon: 0\n    };\n  }\n\n  async componentDidMount() {\n    const id = localStorage.gametoken;\n    const {\n      username\n    } = jwt_decode(localStorage.token);\n    socket.emit(\"joinGame\", {\n      id,\n      username\n    });\n    socket.on(\"showConnections\", data => this.setState(data));\n    socket.on(\"dealResponse\", data => this.setState(data));\n    socket.on(\"drawResponse\", data => this.setState(data));\n    socket.on(\"swapResponse\", data => this.setState(data));\n    socket.on(\"endTurnResponse\", data => this.setState(data));\n    socket.on(\"takeResponse\", data => this.setState(data));\n    socket.on(\"roundWonResponse\", data => this.setState(data));\n    socket.on(\"resetResponse\", data => this.setState(data));\n    socket.on(\"initResponse\", data => this.setState(data));\n    const {\n      deck\n    } = await getState({\n      id\n    });\n    let playerNumber = this.state.activePlayers === 1 ? 1 : -1;\n    await this.setState({\n      id: {\n        id\n      },\n      playerNumber,\n      deck\n    });\n  }\n\n  waiting() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 m-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"fas fa-caret-right fa-3x\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, \"Trash Online\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card card-body text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"fas fa-caret-right fa-2x\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, \"Waiting for someone to join.\")))));\n  }\n\n  table() {\n    if (this.state.player1Size === 0 || this.state.player2Size === 0) return /*#__PURE__*/React.createElement(EndGame, {\n      player1Name: this.state.player1Name,\n      player2Name: this.state.player2Name,\n      playerWon: this.state.playerWon,\n      return: () => this.return(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    });else if (this.state.playerWon !== 0) return /*#__PURE__*/React.createElement(EndRound, {\n      player1Name: this.state.player1Name,\n      player2Name: this.state.player2Name,\n      playerWon: this.state.playerWon,\n      reset: () => this.resetGame(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      value: /*#__PURE__*/React.createElement(\"img\", {\n        src: require(\"./assets/top.png\"),\n        alt: \"top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 20\n        }\n      }),\n      type: \"Deck\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      value: this.state.trash.length > 0 ? /*#__PURE__*/React.createElement(\"img\", {\n        src: require(`./assets/${[this.state.trash.slice(-1)]}.png`),\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }\n      }, \"Trash\"),\n      type: \"Card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.dealCards(),\n      disabled: this.state.gameInSession,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }, \"Deal\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.drawCards(),\n      disabled: !this.state.gameInSession || this.state.playerPlaying,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, \"Draw\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.takeTrash(),\n      disabled: !this.state.gameInSession || this.state.playerPlaying || this.state.trash.length === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, \"Take Trash\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.endTurn(),\n      disabled: !this.state.gameInSession || !this.state.playerPlaying,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }, \"End Turn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetGame(),\n      disabled: !this.state.gameInSession,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }\n    }, \"Reset\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, this.state.gameInSession ? /*#__PURE__*/React.createElement(BoardController, {\n      id: this.state.id,\n      player: this.state.currentPlayer,\n      player1Name: this.state.player1Name,\n      player2Name: this.state.player2Name,\n      player1Cards: this.state.player1Cards,\n      player2Cards: this.state.player2Cards,\n      player1Flipped: this.state.player1Flipped,\n      player2Flipped: this.state.player2Flipped,\n      player1Size: this.state.player1Size,\n      player2Size: this.state.player2Size,\n      hand: this.state.hand,\n      handleSwap: this.swap,\n      callWin: this.roundWon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }) : null));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }\n    }, this.state.activePlayers !== 2 ? this.waiting() : this.table());\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/mnt/c/Users/Abe/Documents/projects/trash-online/client/src/views/Game/Table.js"],"names":["React","Component","draw","take","deal","end","roundWon","swapCards","getState","reset","scores","Card","BoardController","EndRound","EndGame","io","jwt_decode","socket","Table","constructor","drawCards","state","currentPlayer","playerNumber","id","takeTrash","dealCards","endTurn","swap","index","playerWon","resetGame","return","props","history","push","activePlayers","player1Name","player2Name","deck","hand","trash","gameInSession","playerPlaying","player1Size","player2Size","player1Cards","player2Cards","player1Flipped","Array","fill","player2Flipped","componentDidMount","localStorage","gametoken","username","token","emit","on","data","setState","waiting","table","require","length","slice","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  draw,\n  take,\n  deal,\n  end,\n  roundWon,\n  swapCards,\n  getState,\n  reset,\n  scores,\n} from \"../../GameFunctions\";\nimport \"../../App.css\";\nimport Card from \"./Card\";\nimport BoardController from \"./BoardController\";\nimport EndRound from \"./EndRound.js\";\nimport EndGame from \"./EndGame.js\";\nimport io from \"socket.io-client\";\nimport jwt_decode from \"jwt-decode\";\nconst socket = io(\"http://localhost:3002\");\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: \"\",\n      activePlayers: 0,\n      player1Name: \"\",\n      player2Name: \"\",\n      playerNumber: 0,\n      deck: [],\n      hand: \"\",\n      trash: [],\n      currentPlayer: 1,\n      gameInSession: false,\n      playerPlaying: false,\n      player1Size: 10,\n      player2Size: 10,\n      player1Cards: [],\n      player2Cards: [],\n      player1Flipped: new Array(10).fill(0),\n      player2Flipped: new Array(10).fill(0),\n      playerWon: 0,\n    };\n  }\n\n  drawCards = () => {\n    if (this.state.currentPlayer !== this.state.playerNumber) return;\n    draw(this.state.id, this.state);\n  };\n\n  takeTrash = () => {\n    if (this.state.currentPlayer !== this.state.playerNumber) return;\n    take(this.state.id, this.state);\n  };\n\n  dealCards = () => {\n    if (this.state.currentPlayer !== this.state.playerNumber) return;\n    deal(this.state.id, this.state);\n  };\n\n  endTurn = () => {\n    if (this.state.currentPlayer !== this.state.playerNumber) return;\n    end(this.state.id, this.state);\n  };\n\n  swap = (index) => {\n    if (this.state.currentPlayer !== this.state.playerNumber) return;\n    swapCards(this.state.id, index, this.state);\n  };\n\n  roundWon = (playerWon) => {\n    roundWon(this.state.id, playerWon, this.state);\n  };\n\n  resetGame = () => {\n    if (this.state.currentPlayer !== this.state.playerNumber) return;\n    reset(this.state.id, this.state);\n  };\n\n  return = () => {\n    scores(this.state.playerNumber, this.state.playerWon);\n    this.props.history.push(`/profile`);\n  };\n\n  async componentDidMount() {\n    const id = localStorage.gametoken;\n    const { username } = jwt_decode(localStorage.token);\n\n    socket.emit(\"joinGame\", { id, username });\n\n    socket.on(\"showConnections\", (data) => this.setState(data));\n    socket.on(\"dealResponse\", (data) => this.setState(data));\n    socket.on(\"drawResponse\", (data) => this.setState(data));\n    socket.on(\"swapResponse\", (data) => this.setState(data));\n    socket.on(\"endTurnResponse\", (data) => this.setState(data));\n    socket.on(\"takeResponse\", (data) => this.setState(data));\n    socket.on(\"roundWonResponse\", (data) => this.setState(data));\n    socket.on(\"resetResponse\", (data) => this.setState(data));\n    socket.on(\"initResponse\", (data) => this.setState(data));\n\n    const { deck } = await getState({ id });\n    let playerNumber = this.state.activePlayers === 1 ? 1 : -1;\n    await this.setState({\n      id: { id },\n      playerNumber,\n      deck,\n    });\n  }\n\n  waiting() {\n    return (\n      <div className=\"container\">\n        <div className=\"row mt-5\">\n          <div className=\"col-md-6 m-auto\">\n            <h1 className=\"fas fa-caret-right fa-3x\">Trash Online</h1>\n            <div className=\"card card-body text-center\">\n              <h3 className=\"fas fa-caret-right fa-2x\">\n                Waiting for someone to join.\n              </h3>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  table() {\n    if (this.state.player1Size === 0 || this.state.player2Size === 0)\n      return (\n        <EndGame\n          player1Name={this.state.player1Name}\n          player2Name={this.state.player2Name}\n          playerWon={this.state.playerWon}\n          return={() => this.return()}\n        />\n      );\n    else if (this.state.playerWon !== 0)\n      return (\n        <EndRound\n          player1Name={this.state.player1Name}\n          player2Name={this.state.player2Name}\n          playerWon={this.state.playerWon}\n          reset={() => this.resetGame()}\n        />\n      );\n    return (\n      <div>\n        <div className=\"Table\">\n          <Card\n            value={<img src={require(\"./assets/top.png\")} alt=\"top\" />}\n            type=\"Deck\"\n          />\n          <Card\n            value={\n              this.state.trash.length > 0 ? (\n                <img\n                  src={require(`./assets/${[this.state.trash.slice(-1)]}.png`)}\n                  alt=\"\"\n                />\n              ) : (\n                <p>Trash</p>\n              )\n            }\n            type=\"Card\"\n          />\n        </div>\n\n        <div className=\"Options\">\n          <button\n            onClick={() => this.dealCards()}\n            disabled={this.state.gameInSession}\n          >\n            Deal\n          </button>\n          <button\n            onClick={() => this.drawCards()}\n            disabled={!this.state.gameInSession || this.state.playerPlaying}\n          >\n            Draw\n          </button>\n          <button\n            onClick={() => this.takeTrash()}\n            disabled={\n              !this.state.gameInSession ||\n              this.state.playerPlaying ||\n              this.state.trash.length === 0\n            }\n          >\n            Take Trash\n          </button>\n          <button\n            onClick={() => this.endTurn()}\n            disabled={!this.state.gameInSession || !this.state.playerPlaying}\n          >\n            End Turn\n          </button>\n          <button\n            onClick={() => this.resetGame()}\n            disabled={!this.state.gameInSession}\n          >\n            Reset\n          </button>\n        </div>\n        <div>\n          {this.state.gameInSession ? (\n            <BoardController\n              id={this.state.id}\n              player={this.state.currentPlayer}\n              player1Name={this.state.player1Name}\n              player2Name={this.state.player2Name}\n              player1Cards={this.state.player1Cards}\n              player2Cards={this.state.player2Cards}\n              player1Flipped={this.state.player1Flipped}\n              player2Flipped={this.state.player2Flipped}\n              player1Size={this.state.player1Size}\n              player2Size={this.state.player2Size}\n              hand={this.state.hand}\n              handleSwap={this.swap}\n              callWin={this.roundWon}\n            />\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.activePlayers !== 2 ? this.waiting() : this.table()}\n      </div>\n    );\n  }\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}